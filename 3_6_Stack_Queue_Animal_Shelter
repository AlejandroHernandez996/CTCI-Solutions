Animal Shelter: An animal shelter, which holds only dogs and cats, operates on a strictly "first in, first
out" basis. People must adopt either the "oldest" (based on arrival time) of all animals at the shelter,
or they can select whether they would prefer a dog or a cat (and will receive the oldest animal of
that type). They cannot select which specific animal they would like. Create the data structures to
maintain this system and implement operations such as enqueue, dequeueAny, dequeueDog,
and dequeueCat. You may use the built-in LinkedList data structure. 

public class Animal{
  AnimalType type;
  int time;
  public Animal(int time, AnimalType type){
    this.time = time;
    this.type = type;
  }

}
public class AnimalQueue(){

  Queue<Animal> cats = new Queue<Animal>();
  Queue<Animal> dogs = new Queue<Animal>();
  
  private int time;
  
 public void enqueue(Animal animal){
 
  if(animal.type == AnimalType.DOG){
    dogs.add(animal);
  }else{
    cats.add(animal);
  }
  animal.time = time;
  time++;
 }
 public Animal dequeueDog(){
    if(dogs.size() == 0) return null;
    return dogs.poll();
 }
 public Animal dequeueCat(){
    if(cats.size() == 0) return null;
    return cats.poll();
 }
 public Animal dequeue(){
    if(dogs.size() == 0 && cats.size() == 0) return null;
    if(dogs.size()  == 0) return cats.poll();
    if(cats.size() == 0) return dogs.poll();
    Animal dog = dogs.peek();
    Animal cat = cats.peek();
    
    if(dog.time > cat.time){
      return dogs.poll();
    }
    return cats.poll();
 }

}
